首先要考虑的是 项目的结构是不是分成了3个文件？还是1个主函数和2个子函数
readbuf和writebuf是子进程 考虑一下子函数能不能成子进程
子进程没必要创建函数，直接在if else分块就可以了
char *bufP[N]  = N份数据 每份进行赋值
bufP[i]↔数据；
i = i+1 mod N;
环形缓冲
我要分配多大的数组？
目标是文件的复制。所以就先随便复制一个N = 5好了
FILE *fopen(char *filename, char *mode); C语言打开文件
FILE *fp = fopen("demo.txt", "r");
fread可以读取文件
从给定输入流stream读取最多count个对象到数组buffer中（相当于以对每个对象调用size次fgetc），把buffer当作unsigned char数组并顺序保存结果。流的文件位置指示器前进读取的字节数。
若出现错误，则流的文件位置指示器的位置不确定。若没有完整地读入最后一个元素，则其值不确定。
参数
buffer	指向要读取的数组中首个对象的指针
size	每个对象的大小（单位是字节）
count	要读取的对象个数
stream	输入流

errno是一个全局变量 #include<errno.h> 有问题时直接输出就行了
errno22 无效的参数
我要对共享的内存做什么？ 先写再读
P V操作的意义是什么？ 加快速度

任务是从源文件复制到目标文件
多个进程写成多个文件方便调试
errno2 No such file or directory
~ = /home/tzy
有两个子进程 但是主进程 并不在最前面
不对。最前面的就是主进程
我好像没有进行信号灯处理?
echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
sudo service procps restart
居然可以调试多线程？？？？
/etc/sysctl.d/10-ptrace.conf
detach是释放命令 进程会自由运行 关键是子进程没有设置GDB模式
set detach-on-fork off
set follow-fork-mode child
调试成功了。。又累又开心
ftell使用错误
函数 ftell 用于得到文件位置指针当前位置相对于文件首的偏移字节数。在随机方式存取文件时，由于文件位置频繁的前后移动，程序不容易确定文件的当前位置。
好像是重复执行的意思。。
子进程2阻塞在P操作 说明子进程1没有执行V操作
子进程1第二次就阻塞了。
大概了理解了主进程在什么地方
也就是说没有跑完子进程1 程序就结束了
另外一个问题 就是 fread再写入一个写满了的BUF的时候就不会写了